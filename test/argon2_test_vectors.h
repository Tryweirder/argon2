#pragma once

#include <cstdint>
#include "internal/argon2/argon2_base.h"

namespace argonishche {
    const uint8_t  Argon2Password[8] = {
            'p', 'a', 's', 's', 'w', 'o', 'r', 'd'
    };

    const uint8_t Argon2Salt[] = {
            's', 'o', 'm', 'e', 's', 'a', 'l', 't'
    };

    const uint8_t Argon2dResult[] = {
            0x2e, 0x2e, 0x5e, 0x05,
            0xfe, 0x57, 0xac, 0x2c,
            0xf4, 0x72, 0xec, 0xd0,
            0x45, 0xef, 0x68, 0x7e,
            0x56, 0x2a, 0x98, 0x0f,
            0xd5, 0x03, 0x39, 0xb3,
            0x89, 0xc8, 0x70, 0xe1,
            0x96, 0x2b, 0xbc, 0x45
    };

    const uint8_t GenKatPassword[32] = {
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    };

    const uint8_t GenKatSalt[16] = {
            0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
            0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
    };

    const uint8_t GenKatSecret[8] = {
            0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
    };

    const uint8_t GenKatAAD[12] = {
            0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
            0x04, 0x04, 0x04, 0x04,
    };

    const uint8_t GenKatResult[32] = {
            0x7b, 0xa5, 0xa1, 0x7a, 0x72, 0xf7, 0xe5, 0x99,
            0x77, 0xf7, 0xf2, 0x3d, 0x10, 0xe6, 0x21, 0x89,
            0x8c, 0x63, 0xce, 0xbe, 0xed, 0xda, 0xbd, 0x15,
            0xd8, 0xc6, 0x8f, 0x53, 0xea, 0xb2, 0x1a, 0x32
    };

    const uint8_t GenKatResult128[128] = {
            0x4e, 0xc4, 0x6c, 0x4e, 0x8c, 0x32, 0x89, 0x65,
            0xf9, 0x82, 0x2b, 0x00, 0x95, 0x00, 0x50, 0x0a,
            0x72, 0x0d, 0xc5, 0x12, 0x8d, 0x6b, 0xbd, 0x84,
            0x7a, 0xf0, 0x78, 0x5d, 0xa6, 0x14, 0xe3, 0xf1,
            0xac, 0x07, 0x1c, 0xca, 0x12, 0x4d, 0x32, 0xa4,
            0x24, 0x08, 0x5e, 0x07, 0x7c, 0x26, 0xb9, 0x1b,
            0x5c, 0xc0, 0xff, 0xb8, 0x7a, 0x20, 0x00, 0xcb,
            0x07, 0x2b, 0xb4, 0x4d, 0x7b, 0x5b, 0x79, 0x9e,
            0xb4, 0x21, 0xcb, 0x63, 0xeb, 0x46, 0xd7, 0x79,
            0x44, 0x9c, 0x9f, 0xee, 0xa4, 0x17, 0xb5, 0x01,
            0x0f, 0x61, 0x7e, 0xd8, 0xec, 0x1b, 0xe3, 0x8b,
            0x9a, 0x74, 0x17, 0x19, 0x9d, 0x80, 0xe9, 0x20,
            0xd4, 0x84, 0xdd, 0x07, 0x40, 0xb2, 0x26, 0xdb,
            0xf7, 0xbe, 0x79, 0x7f, 0x81, 0x59, 0x86, 0xf3,
            0xe9, 0x34, 0xe4, 0x52, 0xcd, 0x33, 0xb9, 0xf8,
            0x9e, 0x62, 0x65, 0x89, 0xbb, 0xce, 0x7d, 0x65
    };

    const uint8_t GenKatResult2i[32] = {
            0x87, 0x4d, 0x23, 0xfb, 0x9f, 0x55, 0xe2, 0xff,
            0x66, 0xbc, 0x19, 0x03, 0x46, 0xe7, 0x01, 0x19,
            0x7c, 0x9f, 0x25, 0xd1, 0x1d, 0xa4, 0x5a, 0xad,
            0x0d, 0x5d, 0x24, 0x19, 0x8a, 0xac, 0xd2, 0xbb
    };

    const uint8_t GenKatResult2id[32] = {
            0x99, 0xdf, 0xcf, 0xc2, 0x89, 0x76, 0x93, 0x9d,
            0xa2, 0x97, 0x09, 0x44, 0x34, 0xd8, 0x6f, 0xd0,
            0x0c, 0x94, 0x9a, 0x0f, 0x31, 0x8c, 0x22, 0xf0,
            0xcb, 0xb4, 0x69, 0xaa, 0xa8, 0x72, 0x18, 0xba
    };

    const uint8_t GenKatResult2d2pass[32] = {
            0x59, 0xb0, 0x94, 0x62, 0xcf, 0xdc, 0xd2, 0xb4,
            0x0a, 0xbd, 0x17, 0x81, 0x0a, 0x47, 0x4a, 0x8e,
            0xc1, 0xab, 0xb7, 0xc1, 0x8d, 0x07, 0x53, 0x7c,
            0xb9, 0x64, 0xa2, 0x59, 0x3f, 0xe9, 0xd9, 0xc5
    };

    const uint8_t GenKatResult2i2pass[32] = {
            0xc1, 0x0f, 0x00, 0x5e, 0xf8, 0x78, 0xc8, 0x07,
            0x0e, 0x2c, 0xc5, 0x2f, 0x57, 0x75, 0x25, 0xc9,
            0x71, 0xc7, 0x30, 0xeb, 0x00, 0x64, 0x4a, 0x4e,
            0x26, 0xd0, 0x6e, 0xad, 0x75, 0x46, 0xe0, 0x44
    };

    const uint8_t GenKatResult2id2pass[32] = {
            0x6c, 0x00, 0xb7, 0xa9, 0x00, 0xe5, 0x00, 0x4c,
            0x24, 0x46, 0x9e, 0xc1, 0xe7, 0xc0, 0x1a, 0x99,
            0xb2, 0xb8, 0xf7, 0x73, 0x75, 0xd4, 0xec, 0xa7,
            0xd8, 0x08, 0x42, 0x11, 0xd3, 0x23, 0x6b, 0x7a
    };

    const uint8_t GenKatResult2d2pass2threads32kb[32] = {
            0x2b, 0x47, 0x35, 0x39, 0x4a, 0x40, 0x3c, 0xc9,
            0x05, 0xfb, 0x51, 0x25, 0x96, 0x68, 0x64, 0x43,
            0x02, 0x16, 0x38, 0xa6, 0xc1, 0x58, 0xfc, 0x8d,
            0xbf, 0x35, 0x73, 0x9a, 0xdb, 0x31, 0x0c, 0x60
    };

    const uint8_t GenKatResult2d2pass4threads64kb[32] = {
            0x8f, 0xa2, 0x7c, 0xed, 0x28, 0x38, 0x79, 0x0f,
            0xba, 0x5c, 0x11, 0x85, 0x1c, 0xdf, 0x90, 0x88,
            0xb2, 0x18, 0x44, 0xd7, 0xf0, 0x4c, 0x97, 0xb2,
            0xca, 0xaf, 0xe4, 0xdc, 0x61, 0x4c, 0xae, 0xb2
    };

    const uint8_t GenKatResult2i2pass4threads64kb[32] = {
            0x61, 0x1c, 0x99, 0x3c, 0xb0, 0xb7, 0x23, 0x16,
            0xbd, 0xa2, 0x6c, 0x4c, 0x2f, 0xe8, 0x2d, 0x39,
            0x9c, 0x8f, 0x1c, 0xfd, 0x45, 0xd9, 0x58, 0xa9,
            0xb4, 0x9c, 0x6c, 0x64, 0xaf, 0xf0, 0x79, 0x0b
    };

    const uint8_t GenKatResult2id2pass4threads64kb[32] = {
            0x4f, 0x93, 0xb5, 0xad, 0x78, 0xa4, 0xa9, 0x49,
            0xfb, 0xe3, 0x55, 0x96, 0xd5, 0xa0, 0xc2, 0xab,
            0x6f, 0x52, 0x2d, 0x2d, 0x29, 0xbc, 0x98, 0x49,
            0xca, 0x92, 0xaa, 0xae, 0xba, 0x05, 0x29, 0xd8
    };

#define ARGON2D_TEST(InstructionSet) \
    class Test_Argon2d_1024_##InstructionSet { \
    public: \
        static bool RunTest() { \
            uint8_t hash_val[32]; \
            Argon2##InstructionSet<1024, 1> argon2(Argon2Type::Argon2_d, 1, nullptr, 0); \
            argon2.Hash((const uint8_t*)Argon2Password, 8, Argon2Salt, 8, hash_val, 32); \
            bool rs1 = (memcmp(hash_val, Argon2dResult, 32) == 0); \
            \
            bool rs2 = argon2.Verify( \
                (const uint8_t*)Argon2Password, 8, \
                Argon2Salt, 8, \
                Argon2dResult, 32 \
            ); \
            return rs1 && rs2; \
        } \
    };

#define ARGON_TEST(InstructionSet, type, result, tcost, mcost, threads) \
    class Test_Argon2_##InstructionSet##result { \
    public: \
        static bool RunTest() { \
            uint8_t hash_res[32]; \
            Argon2##InstructionSet<mcost, threads> argon2(type, tcost, (uint8_t*)GenKatSecret, sizeof(GenKatSecret)); \
            argon2.Hash( \
                (uint8_t*)GenKatPassword, sizeof(GenKatPassword), \
                GenKatSalt, sizeof(GenKatSalt), \
                hash_res, 32, \
                GenKatAAD, sizeof(GenKatAAD) \
            ); \
            \
            bool rs1 = memcmp(hash_res, result, 32) == 0; \
            \
            bool rs2 = argon2.Verify( \
                (uint8_t*)GenKatPassword, sizeof(GenKatPassword), \
                GenKatSalt, sizeof(GenKatSalt), \
                (uint8_t*)result, 32, \
                GenKatAAD, sizeof(GenKatAAD) \
            ); \
            return rs1 && rs2; \
        } \
    };

#define CHECK_RESULT(x) \
    if(!x) return 1;

}
